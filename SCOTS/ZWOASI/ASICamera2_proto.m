function [methodinfo,structs,enuminfo,ThunkLibName]=ASICamera2_proto
%ASICAMERA2_PROTO Create structures to define interfaces found in 'ASICamera2'.

%This function was generated by loadlibrary.m parser version  on Wed Aug  7 12:59:39 2019

%Modified by Sergio Bonaque-Gonzalez. Optical Engineer. August 2019
%sergiob@wooptix.com

%perl options:'ASICamera2.i -outfile=ASICamera2_proto.m -thunkfile=ASICamera2_thunk_pcwin64.c -header=ASICamera2.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'ASICamera2_thunk_pcwin64');
% int ASIGetNumOfConnectedCameras (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='ASIGetNumOfConnectedCameras'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int ASIGetProductIDs ( int * pPIDs ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ASIGetProductIDs'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% int ASIGetCameraProperty ( ASI_CAMERA_INFO * pASICameraInfo , int iCameraIndex ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='ASIGetCameraProperty'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'s_ASI_CAMERA_INFOPtr', 'int32'};fcnNum=fcnNum+1;
% int ASIGetCameraPropertyByID ( int iCameraID , ASI_CAMERA_INFO * pASICameraInfo ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='ASIGetCameraPropertyByID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 's_ASI_CAMERA_INFOPtr'};fcnNum=fcnNum+1;
% int ASIOpenCamera ( int iCameraID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='ASIOpenCamera'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int ASIInitCamera ( int iCameraID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='ASIInitCamera'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int ASICloseCamera ( int iCameraID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='ASICloseCamera'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int ASIGetNumOfControls ( int iCameraID , int * piNumberOfControls ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='ASIGetNumOfControls'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int ASIGetControlCaps ( int iCameraID , int iControlIndex , ASI_CONTROL_CAPS * pControlCaps ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='ASIGetControlCaps'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 's_ASI_CONTROL_CAPSPtr'};fcnNum=fcnNum+1;
% int ASIGetControlValue ( int iCameraID , int ControlType , long * plValue , int * pbAuto ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ASIGetControlValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'longPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% int ASISetControlValue ( int iCameraID , int ControlType , long lValue , int bAuto ); 
fcns.thunkname{fcnNum}='int32int32int32longint32Thunk';fcns.name{fcnNum}='ASISetControlValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'long', 'int32'};fcnNum=fcnNum+1;
% int ASISetROIFormat ( int iCameraID , int iWidth , int iHeight , int iBin , int Img_type ); 
fcns.thunkname{fcnNum}='int32int32int32int32int32int32Thunk';fcns.name{fcnNum}='ASISetROIFormat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% int ASIGetROIFormat ( int iCameraID , int * piWidth , int * piHeight , int * piBin , int * pImg_type ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ASIGetROIFormat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int ASISetStartPos ( int iCameraID , int iStartX , int iStartY ); 
fcns.thunkname{fcnNum}='int32int32int32int32Thunk';fcns.name{fcnNum}='ASISetStartPos'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% int ASIGetStartPos ( int iCameraID , int * piStartX , int * piStartY ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ASIGetStartPos'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int ASIGetDroppedFrames ( int iCameraID , int * piDropFrames ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='ASIGetDroppedFrames'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int ASIEnableDarkSubtract ( int iCameraID , char * pcBMPPath ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='ASIEnableDarkSubtract'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int ASIDisableDarkSubtract ( int iCameraID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='ASIDisableDarkSubtract'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int ASIStartVideoCapture ( int iCameraID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='ASIStartVideoCapture'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int ASIStopVideoCapture ( int iCameraID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='ASIStopVideoCapture'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int ASIGetVideoData ( int iCameraID , unsigned char * pBuffer , long lBuffSize , int iWaitms ); 
fcns.thunkname{fcnNum}='int32int32voidPtrlongint32Thunk';fcns.name{fcnNum}='ASIGetVideoData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr', 'long', 'int32'};fcnNum=fcnNum+1;
% int ASIPulseGuideOn ( int iCameraID , int direction ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='ASIPulseGuideOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int ASIPulseGuideOff ( int iCameraID , int direction ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='ASIPulseGuideOff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int ASIStartExposure ( int iCameraID , int bIsDark ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='ASIStartExposure'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int ASIStopExposure ( int iCameraID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='ASIStopExposure'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int ASIGetExpStatus ( int iCameraID , ASI_EXPOSURE_STATUS * pExpStatus ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='ASIGetExpStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'ASI_EXPOSURE_STATUSPtr'};fcnNum=fcnNum+1;
% int ASIGetDataAfterExp ( int iCameraID , unsigned char * pBuffer , long lBuffSize ); 
fcns.thunkname{fcnNum}='int32int32voidPtrlongThunk';fcns.name{fcnNum}='ASIGetDataAfterExp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint8Ptr', 'long'};fcnNum=fcnNum+1;
% int ASIGetID ( int iCameraID , ASI_ID * pID ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='ASIGetID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 's_ASI_IDPtr'};fcnNum=fcnNum+1;
% int ASISetID ( int iCameraID , ASI_ID ID ); 
fcns.thunkname{fcnNum}='int32int32ASI_IDThunk';fcns.name{fcnNum}='ASISetID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 's_ASI_ID'};fcnNum=fcnNum+1;
% int ASIGetGainOffset ( int iCameraID , int * pOffset_HighestDR , int * pOffset_UnityGain , int * pGain_LowestRN , int * pOffset_LowestRN ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ASIGetGainOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% char * ASIGetSDKVersion (); 
fcns.thunkname{fcnNum}='cstringThunk';fcns.name{fcnNum}='ASIGetSDKVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int ASIGetCameraSupportMode ( int iCameraID , ASI_SUPPORTED_MODE * pSupportedMode ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='ASIGetCameraSupportMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 's_ASI_SUPPORTED_MODEPtr'};fcnNum=fcnNum+1;
% int ASIGetCameraMode ( int iCameraID , ASI_CAMERA_MODE * mode ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='ASIGetCameraMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'ASI_CAMERA_MODEPtr'};fcnNum=fcnNum+1;
% int ASISetCameraMode ( int iCameraID , ASI_CAMERA_MODE mode ); 
fcns.thunkname{fcnNum}='int32int32ASI_CAMERA_MODEThunk';fcns.name{fcnNum}='ASISetCameraMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'ASI_CAMERA_MODE'};fcnNum=fcnNum+1;
% int ASISendSoftTrigger ( int iCameraID , int bStart ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='ASISendSoftTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int ASIGetSerialNumber ( int iCameraID , ASI_SN * pSN ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='ASIGetSerialNumber'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 's_ASI_IDPtr'};fcnNum=fcnNum+1;
% int ASISetTriggerOutputIOConf ( int iCameraID , ASI_TRIG_OUTPUT_PIN pin , int bPinHigh , long lDelay , long lDuration ); 
fcns.thunkname{fcnNum}='int32int32ASI_TRIG_OUTPUT_PINint32longlongThunk';fcns.name{fcnNum}='ASISetTriggerOutputIOConf'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'ASI_TRIG_OUTPUT', 'int32', 'long', 'long'};fcnNum=fcnNum+1;
% int ASIGetTriggerOutputIOConf ( int iCameraID , ASI_TRIG_OUTPUT_PIN pin , int * bPinHigh , long * lDelay , long * lDuration ); 
fcns.thunkname{fcnNum}='int32int32ASI_TRIG_OUTPUT_PINvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ASIGetTriggerOutputIOConf'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'ASI_TRIG_OUTPUT', 'int32Ptr', 'longPtr', 'longPtr'};fcnNum=fcnNum+1;
structs.s_ASI_CAMERA_INFO.members=struct ('Name', 'int8#64', 'CameraID', 'int32', 'MaxHeight', 'long', 'MaxWidth', 'long', 'IsColorCam', 'ASI_BOOL', 'BayerPattern', 'ASI_BAYER_PATTERN', 'SupportedBins', 'int32#16', 'SupportedVideoFormat', 'int32#8', 'PixelSize', 'double', 'MechanicalShutter', 'ASI_BOOL', 'ST4Port', 'ASI_BOOL', 'IsCoolerCam', 'ASI_BOOL', 'IsUSB3Host', 'ASI_BOOL', 'IsUSB3Camera', 'ASI_BOOL', 'ElecPerADU', 'single', 'BitDepth', 'int32', 'IsTriggerCam', 'ASI_BOOL', 'Unused', 'int8#16');
structs.s_ASI_CONTROL_CAPS.members=struct('Name', 'int8#64', 'Description', 'int8#128', 'MaxValue', 'long', 'MinValue', 'long', 'DefaultValue', 'long', 'IsAutoSupported', 'ASI_BOOL', 'IsWritable', 'ASI_BOOL', 'ControlType', 'ASI_CONTROL_TYPE', 'Unused', 'int8#32');
structs.s_ASI_ID.members=struct('id', 'uint8#8');
structs.s_ASI_SUPPORTED_MODE.members=struct('SupportedCameraMode', 'ASI_CAMERA_MODE');
enuminfo.ASI_BAYER_PATTERN=struct('ASI_BAYER_RG',0,'ASI_BAYER_BG',1,'ASI_BAYER_GR',2,'ASI_BAYER_GB',3);
enuminfo.ASI_GUIDE_DIRECTION=struct('ASI_GUIDE_NORTH',0,'ASI_GUIDE_SOUTH',1,'ASI_GUIDE_EAST',2,'ASI_GUIDE_WEST',3);
enuminfo.ASI_EXPOSURE_STATUS=struct('ASI_EXP_IDLE',0,'ASI_EXP_WORKING',1,'ASI_EXP_SUCCESS',2,'ASI_EXP_FAILED',3);
enuminfo.ASI_ERROR_CODE=struct('ASI_SUCCESS',0,'ASI_ERROR_INVALID_INDEX',1,'ASI_ERROR_INVALID_ID',2,'ASI_ERROR_INVALID_CONTROL_TYPE',3,'ASI_ERROR_CAMERA_CLOSED',4,'ASI_ERROR_CAMERA_REMOVED',5,'ASI_ERROR_INVALID_PATH',6,'ASI_ERROR_INVALID_FILEFORMAT',7,'ASI_ERROR_INVALID_SIZE',8,'ASI_ERROR_INVALID_IMGTYPE',9,'ASI_ERROR_OUTOF_BOUNDARY',10,'ASI_ERROR_TIMEOUT',11,'ASI_ERROR_INVALID_SEQUENCE',12,'ASI_ERROR_BUFFER_TOO_SMALL',13,'ASI_ERROR_VIDEO_MODE_ACTIVE',14,'ASI_ERROR_EXPOSURE_IN_PROGRESS',15,'ASI_ERROR_GENERAL_ERROR',16,'ASI_ERROR_INVALID_MODE',17,'ASI_ERROR_END',18);
enuminfo.ASI_FLIP_STATUS=struct('ASI_FLIP_NONE',0,'ASI_FLIP_HORIZ',1,'ASI_FLIP_VERT',2,'ASI_FLIP_BOTH',3);
enuminfo.ASI_BOOL=struct('ASI_FALSE',0,'ASI_TRUE',1);
enuminfo.ASI_CAMERA_MODE=struct('ASI_MODE_NORMAL',0,'ASI_MODE_TRIG_SOFT_EDGE',1,'ASI_MODE_TRIG_RISE_EDGE',2,'ASI_MODE_TRIG_FALL_EDGE',3,'ASI_MODE_TRIG_SOFT_LEVEL',4,'ASI_MODE_TRIG_HIGH_LEVEL',5,'ASI_MODE_TRIG_LOW_LEVEL',6,'ASI_MODE_END',-1);
enuminfo.ASI_TRIG_OUTPUT=struct('ASI_TRIG_OUTPUT_PINA',0,'ASI_TRIG_OUTPUT_PINB',1,'ASI_TRIG_OUTPUT_NONE',-1);
enuminfo.ASI_IMG_TYPE=struct('ASI_IMG_RAW8',0,'ASI_IMG_RGB24',1,'ASI_IMG_RAW16',2,'ASI_IMG_Y8',3,'ASI_IMG_END',-1);
enuminfo.ASI_CONTROL_TYPE=struct('ASI_GAIN',0,'ASI_EXPOSURE',1,'ASI_GAMMA',2,'ASI_WB_R',3,'ASI_WB_B',4,'ASI_OFFSET',5,'ASI_BANDWIDTHOVERLOAD',6,'ASI_OVERCLOCK',7,'ASI_TEMPERATURE',8,'ASI_FLIP',9,'ASI_AUTO_MAX_GAIN',10,'ASI_AUTO_MAX_EXP',11,'ASI_AUTO_TARGET_BRIGHTNESS',12,'ASI_HARDWARE_BIN',13,'ASI_HIGH_SPEED_MODE',14,'ASI_COOLER_POWER_PERC',15,'ASI_TARGET_TEMP',16,'ASI_COOLER_ON',17,'ASI_MONO_BIN',18,'ASI_FAN_ON',19,'ASI_PATTERN_ADJUST',20,'ASI_ANTI_DEW_HEATER',21);
methodinfo=fcns;